<% include ../template/header.ejs %>
<!-- <script type='text/javascript' src='http://code.jquery.com/jquery-1.7.2.min.js'></script> -->
<script src="js/mqttws31.min.js" type="text/javascript"></script>
<script type="text/javascript" src="js/moment.js"></script>
<script src="js/Chart.js"></script>
<script type="text/javascript" src="js/chartjs-plugin-streaming.js"></script>
<script src="/socket.io/socket.io.js"></script>
<!-- <script type='text/javascript' src='mosquitto.js'></script> -->

<script>
    //dataReceived = '';
    data = new Array();
    topcsArray = new Array();
    
    function f(index, arg) {
        data[index] = arg;
        update(data[index]);

    }
    
    function update(){
        return data[0];
    }

</script>
<script type="text/javascript">
    var socket = io.connect('http://192.168.31.8:3000');
    socket.on('connect', function () {
        socket.on('mqtt', function (msg) {
            var elmarr = msg.topic.split("/");
            var elm = document.getElementById(elmarr[3]);
            console.log(msg.topic + ' ' + msg.payload);
            
            <%if (topics) {
                for (var i = 0; i < topics.length; i++) { %>
                    var strTopic = '<%= topics[i].topico  %>';
                    if (msg.topic === strTopic) {
                        f(<%= i %>, msg.payload);

                    }

                <%}%>
                                 
            <%}%>

        });
        
        <%if (topics) {
            for (var i = 0; i < topics.length; i++) { %>
                var str = '<%= topics[i].topico  %>';
                socket.emit('subscribe', { topic: str });
                topcsArray.push(str);

            <%}%>
            
                        
        <%}%>
        
        
    });
</script>
<div class="row">
    <div class="col-lg-6 mb-4">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-capitalize text-success">Condutividade Elétrica</h6>
            </div>
            <div class="card-body">
                <script src="js/highcharts.js"></script>
                <script src="js/highcharts-more.js"></script>
                <script src="js/solid-gauge.js"></script>
                <script src="js/exporting.js"></script>
                <script src="js/export-data.js"></script>
                <script src="js/accessibility.js"></script>

                <figure class="highcharts-figure">
                    <div id="container-speed" class="chart-container"></div>
                    <!-- <div id="container-rpm" class="chart-container"></div> -->
                    <p class="highcharts-description">
                        Controle da Bomba
                    </p>
                </figure>
                <script>
                    var gaugeOptions = {
                        chart: {
                            type: 'solidgauge'
                        },

                        title: null,

                        pane: {
                            center: ['50%', '85%'],
                            size: '140%',
                            startAngle: -90,
                            endAngle: 90,
                            background: {
                                backgroundColor:
                                    Highcharts.defaultOptions.legend.backgroundColor || '#EEE',
                                innerRadius: '60%',
                                outerRadius: '100%',
                                shape: 'arc'
                            }
                        },

                        exporting: {
                            enabled: false
                        },

                        tooltip: {
                            enabled: false
                        },

                        // the value axis
                        yAxis: {
                            stops: [
                                [0.1, '#55BF3B'], // green
                                [0.5, '#DDDF0D'], // yellow
                                [0.9, '#DF5353'] // red
                            ],
                            lineWidth: 0,
                            tickWidth: 0,
                            minorTickInterval: null,
                            tickAmount: 2,
                            title: {
                                y: -70
                            },
                            labels: {
                                y: 16
                            }
                        },

                        plotOptions: {
                            solidgauge: {
                                dataLabels: {
                                    y: 5,
                                    borderWidth: 0,
                                    useHTML: true
                                }
                            }
                        }
                    };

                    // The speed gauge
                    var chartSpeed = Highcharts.chart('container-speed', Highcharts.merge(gaugeOptions, {
                        yAxis: {
                            min: 0,
                            max: 10000,
                            title: {
                                text: 'Condutividade Elétrica'
                            }
                        },

                        credits: {
                            enabled: false
                        },

                        series: [{
                            name: 'Speed',
                            data: [0],
                            dataLabels: {
                                format:
                                    '<div style="text-align:center">' +
                                    '<span style="font-size:25px">{y}</span><br/>' +
                                    '<span style="font-size:12px;opacity:0.4">uS/cm</span>' +
                                    '</div>'
                            },
                            tooltip: {
                                valueSuffix: ' uS/cm'
                            }
                        }]

                    }));

                    // The RPM gauge
                

                    // Bring life to the dials
                    setInterval(function () {
                        // Speed
                        var point,
                            newVal,
                            inc;

                        if (chartSpeed) {
                            point = chartSpeed.series[0].points[0];
                            inc = Math.round((Math.random() - 0.5) * 100);
                            newVal = point.y + inc;

                            if (newVal < 0 || newVal > 200) {
                                newVal = point.y - inc;
                            }
                            var stre = data[0];
                            var n = parseInt(stre, 10);
                            point.update(n);
                            /*point.update(newVal);
                             if(data[0]){
                                //console.log(data[0]);
                                //newVal = data[0];
                                newVal = update();
                                console.log(newVal);
                                data_ant = newVal;
                                point.update(newVal);
                            
                            }*/
                            
                            
                        }

                        // RPM
                       
                    }, 2000);

                </script>
                <style>
                    .highcharts-figure .chart-container {
                        width: 300px;
                        height: 200px;
                        float: left;
                    }

                    @media (max-width: 300px) {
                        .highcharts-figure {
                            width: 100%;
                        }

                        .highcharts-figure .chart-container {
                            width: 300px;
                            float: none;
                            margin: 0 auto;
                        }

                    }

                    .highcharts-figure,
                    .highcharts-data-table table {
                        width: 300px;
                        margin: 0 auto;
                    }

                    .highcharts-data-table table {
                        font-family: Verdana, sans-serif;
                        border-collapse: collapse;
                        border: 1px solid #EBEBEB;
                        margin: 10px auto;
                        text-align: center;
                        width: 100%;
                        max-width: 500px;
                    }

                    .highcharts-data-table caption {
                        padding: 1em 0;
                        font-size: 1.2em;
                        color: #555;
                    }

                    .highcharts-data-table th {
                        font-weight: 600;
                        padding: 0.5em;
                    }

                    .highcharts-data-table td,
                    .highcharts-data-table th,
                    .highcharts-data-table caption {
                        padding: 0.5em;
                    }

                    .highcharts-data-table thead tr,
                    .highcharts-data-table tr:nth-child(even) {
                        background: #f8f8f8;
                    }

                    .highcharts-data-table tr:hover {
                        background: #f1f7ff;
                    }
                </style>
              
                <script>
                    var socket = io('http://localhost:3000');
                    socket.on('connect', function (data) {
                        console.log('data');
                        //socket.emit('sendMessage', { my: 'data' });
                    });
                    function Ligar(){
                        socket.emit('sendMessage', { msg: 'D' });
                    }
                    function Desligar(){
                        socket.emit('sendMessage', { msg: 'L' });
                    }
                </script>
                    
                  <input class="btn btn-sucess" id="liga-output"  onclick="Ligar()" type="button" value="Ligar">
                  <input class="btn btn-danger" id="desliga-output" onclick="Desligar()" type="button" value="Desligar"><br>
                
                    
                
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <script>

 <%if (topics) { %>
            var $wrapper = document.querySelector('.container-fluid');
            <% for (var i = 0; i < topics.length; i++) { %>
                var str = '<%= topics[i].topico  %>';
                if (<%= i %> === 0) {
                    var HtmlString = '<div class="row">';
                    var fragRow = document.createRange().createContextualFragment(HtmlString);
                    $wrapper.appendChild(fragRow);

                }


                var $rows = document.querySelector('.row');
                var HtmlConteudo = '<div class="col-lg-6 mb-4"> <div class="card shadow mb-4"> <div class="card-header py-3"> <h6 class="m-0 font-weight-bold text-capitalize text-success"><%= topics[i].nome  %></h6> </div><div class="card-body"> <canvas id="<%= topics[i].id_dispositivo %>"> </canvas> </div></div></div>';
                var fragConteudo = document.createRange().createContextualFragment(HtmlConteudo);
                $rows.appendChild(fragConteudo);
            
            <%}%>
            var HtmlFinish = '</div>';
            var fragFinish = document.createRange().createContextualFragment(HtmlFinish);
            $wrapper.appendChild(fragFinish);

            
                        
        <%}%>

    </script>

</div>

<script>

var chartColors = {
        red: 'rgb(255, 99, 132)',
        orange: 'rgb(255, 159, 64)',
        yellow: 'rgb(255, 205, 86)',
        green: 'rgb(75, 192, 192)',
        blue: 'rgb(54, 162, 235)',
        purple: 'rgb(153, 102, 255)',
        grey: 'rgb(201, 203, 207)'
    };

    var color = Chart.helpers.color;

    window.onload = function () {
        var dataSets = new Array();
        var arrayIdsCharts = new Array();
        var ArrayContexto = new Array();
        var ctx = new Array();
        //data[0] = 0;
    <%if (topics) {
            for (var i = 0; i < topics.length; i++) { %>
                //var str = '<%= topics[i].topico  %>';
                //arrayIdsCharts.push(<%= topics[i].idDispositivo  %>);
                dataSets[<%= i %>] = function onRefresh(chart) {
                    chart.config.data.datasets.forEach(function (dataset) {
                        dataset.data.push({
                            x: Date.now(),
                            y: data[<%= i %>]
                        });
                    });
                }
                ctx[<%= i %>] = document.getElementById('<%= topics[i].id_dispositivo  %>').getContext('2d');
                window.myChart = new Chart(ctx[<%= i %>], {
                    type: 'line',
                    data: {
                        datasets: [{
                            label: 'Dados',
                            backgroundColor: color(chartColors.green).alpha(0.5).rgbString(),
                            borderColor: chartColors.green,
                            fill: true,
                            cubicInterpolationMode: 'monotone',
                            data: []
                        }]
                    },
                    options: {
                        title: {
                            display: true,
                            //text: 'Grafico de Linha'
                        },
                        scales: {
                            xAxes: [{
                                type: 'realtime'
                            }],
                            yAxes: [{
                                scaleLabel: {
                                    display: true,
                                    labelString: "Valor",

                                },
                                ticks: {
                                    beginAtZero: true,
                                    max: 100
                                }

                            }]
                        },
                        tooltips: {
                            mode: 'nearest',
                            intersect: false
                        },
                        hover: {
                            mode: 'nearest',
                            intersect: false
                        },
                        plugins: {
                            streaming: {
                                duration: 20000,
                                refresh: 3000,
                                delay: 3000,
                                onRefresh: dataSets[<%= i %>]
                            }
                        }
                    }
                });
                
            <%}%>
            
                        
        <%}%>


};

</script>

<% include ../template/footer.ejs %>
